						TUTORIAL DE TAILWINDCSS POR BLUUWEB

Fuente: https://www.youtube.com/watch?v=3xlUAMXui2c&list=PLPl81lqbj-4JdoHDiERR2ptkw9zRggXAL

TailwindCSS es mucho más poderoso,ya que Bootstrap ofrece clases que ofrecen componentes ya personalizados,mientras que con Tailwind puedo personalizar todo,ya que no ofrece componentes,sino clases de utilidad.

NOTA: si bien puedo usar su CDN para empezar rapidamente a estilizar no se recomienda para producción,ya que no podré usar directivas como @apply,@variants,... no podré customizar el default theme, no puedo instalar plugins o activar features como group-hover.
Es obvio pues que debo usar npm siempre que haga algo minímamente serio.

						PRINCIPIOS DE TAILWINDCSS

Tailwind por defecto usa normalize.Reseteará varios elementos como los headings,quitandoles margen,tamaño y peso de la fuente, las listas,quitandolas margenes y viñetas o poniendo en display:block a <img>.<svg> <video>,...

Esto es asi porque quieren que yo personalize los headings.Veamos un ejemplo con un botón:
  <button class="bg-blue-500 px-2 py-1 rounded text-white hover:bg-blue-700 mt-4 font-bold">Boton Tailwind</button>

IMPORTANTE: Tailwind está diseñado Mobile First,cualquier breakpoint que se le aplique lo heredarán los breakpoints superiores(debido a que usa min-width):

sm: @media(min-width:640) <- fijate que en cuanto aplique sm dejo las clases normales para un tamaño menor a 640 y lo que ponga en esas clases desde 640 en adelante
<button class"px-2 sm:px4" <- puedo ver que es Mobile First,pues será un padding de 2 rem para tamaño menor a 640 y desde 640 un padding de 4 rem.

md: @media(min-width:768px) <- y lo mismo para los demas breakpoints.Si ahora aplico este,cualquier tamaño superior a 768 tomará estas clases para estilizarse,confirmando que vamos de menor tamaño a mayor tamaño.
<button class="px-2 sm:px-4 md-px-3"> <- fijate como cubre todas las posibilidades

lg:@media(min-width:1024px) <- lg para portatiles
xl:@media(min-width:1280px) <- para screens grandes como ordenadores de sobremesa,tvs,etc.Fijate que por esto no encontraba xs,porque es el breakpoint que quedará.

NOTA: en Tailwind los modificadores se pueden stackear para hacer target a situaciones más especificas:
<button class="dark:md:hover:bg-fuchsia-600"> <- solo desde 768px,en el hover y en el tema oscuro

						PREFLIGTH

NOTA:Prefligth está construido sobre normalize.css
Prefligth es un conjunto de estilos base para Tailwind que están diseñados para suavizar las inconsistencias entre navegadores.SI bien ya lo he mencionado antes:
Prefligth elimina todos los márgenes predeterminados de encabezados,párrafos,...
Todos los headings tendrán el mismo tamaño y peso de fuente
Las listas(ordenadas y no ordenadas) están sin estilo,márgenes y viñetas
Imágenes y otros elementos multimedia están en disposición block y no inline-block

							CLASES

Clase Container: crea un contenedor(pero no centra nada,ojo,lo tengo que hacer yo)
Según el breakpoint va a ser de un tamaño máximo concreto
breakpoint(none): width:100%
breakpoint(sm): el container será de max-width:640px
breakpoint(md): max-width:768px
breakpoint(lg): max-width:1024px
breakpoint(xl): max-width:1280px

Obviamente tengo que usar mx-auto para centrarlo.
Fijate que puedo usar xl:container para que solo se aplique la clase desde min-width:1280px por ejemplo.

Paddings & Margenes:Exactamente igual que en Bootstrap,usaré p,px,py,pl,pr,pb,pt + el padding que quiera como un numero.
NOTA: cada numero incrementa en 0.25rem,asi p-1 es un padding de 0.25 rem mientras que p-2 es un padding de o.5rem.

IMPORTANTE: Tailwind es mucho mejor que Bootstrap,puedo usar decimales(p-1.5,es decir padding de 0.375rem),y puedo llegar hasta 100.La escala que usa Tailwind es(desde 1 al 16 de 1 en 1 y despues de 4 en 4,luego puedo usar p-16,p-20,p24,p-28,... hasta p-96)

IMPORTANTE: otra cosa que no tiene Bootstrap es poder usar márgenes o paddings negativos.En Tailwind puedo usar un (-)delante para que sea negativo:
<div class="-mt-3.5" <- margin-top de -0.875rem.
Lo mismo para márgenes

Space-between: clase especial que es como gap.Dará un espaciado entre los elementos,sin afectar al primero y ultimo.Por ejemplo, space-x-1 dara un espaciado entre los elementos en el eje x.Lo mismo para la y:

space-x-0 > * + *	margin-left: 0px;
space-y-0 > * + *	margin-top: 0px;
space-x-0.5 > * + *	margin-left: 0.125rem;
space-y-0.5 > * + *	margin-top: 0.125rem;
space-x-1 > * + *	margin-left: 0.25rem;
space-y-1 > * + *	margin-top: 0.25rem;

Font-Size: controla el font size de un elemento usando la clase 'text-{size}'.Empieza en xs y llega hasta xl,aunque está ultima puede llevar un numero delante hasta9(text-xs,text-lg,text-xl,text-3xl,text-7xl,...)

text-xs	font-size: 0.75rem; line-height: 1rem;
text-sm	font-size: 0.875rem; line-height: 1.25rem;
text-base	font-size: 1rem; line-height: 1.5rem;
text-lg	font-size: 1.125rem; line-height: 1.75rem;
text-xl	font-size: 1.25rem; line-height: 1.75rem;
text-2xl	font-size: 1.5rem; line-height: 2rem;
text-3xl	font-size: 1.875rem; line-height: 2.25rem;
text-4xl	font-size: 2.25rem; line-height: 2.5rem;
text-5xl	font-size: 3rem; line-height: 1;
text-6xl	font-size: 3.75rem; line-height: 1;
text-7xl	font-size: 4.5rem; line-height: 1;
text-8xl	font-size: 6rem; line-height: 1;
text-9xl	font-size: 8rem; line-height: 1;

Muchas veces necesitamos otra fuente en dispositivos más pequeños:
<p class="text-base md:text-lg xl:text-2xl"> 
Una regla que tiene Tailwind es crear los estilos empezando desde dispositivos más pequeños.

Colores para texto y fondo: para el fondo usaré .bg-{color} mientras que para el color de texto usaré .text-{color}.Recuerda que además puedo inferir un hexadecimalHay desde el 100 hasta el 900 para la tonalidad:
<h1 class="text-red-900 text-3xl">Esto es un header h1 de color text-red-900</h1>
<h2 class="-mt-1.5 text-blue-700 text-2xl">h2 con margin top negativo</h2>
<h3 class="text-orange-600 -ml-1.5 text-lg">h3 con margen left negativo</h3>

Alineacion: para alinear se usa text-center,text-right,text-left y text-justify:

text-left	text-align: left;
text-center	text-align: center;
text-right	text-align: right;
text-justify	text-align: justify;

Text-transform: para transformar textos Tailwind es un poco menos verboso que Bootstrap y cambia text-uppercase por sólo uppercase,lo mismo con todas:

uppercase: text-transform:uppercase;
lowercas: text-transform: lowercas;
capitalize: text-transform: capitalize;
normal-case: text-transform:none

Border-radius: utilities para controlar el border radius:
rounded-none: border-radius:0
rounded-sm: border-radius:0.125rem;
rounded: border-radius:0.25rem;
rounded-md: 0.375
rounded-full: border-radius:9999px <- para circulos

rounded-t-none: border-top-left y border top right a none
rounded-t-md: border tops a 0.375
rounded-r-sm: border top right y border bottom right a 0.125
rounded-l-{size} borders por la izquierda a ese tamaño
rounded -b-{size}

Recuerda que puedo redondear todo,o solo un lado o hacer un circulo

Anchos y Altos(width y height)
w-0: width de 0
w-1: width de 0.25rem;
w-2: width de 0.5rem;
w-1/2 <- width del 50%
w-1/3 width del 33.3333%
w-1/4 width del 25%
w-3/4 width del 75%
w-full: width del 100%
w-screen : width del 100vw
w-min: width de min-content
w-max: width de max-content

Resumen:
Fixed widths:
Use w-{number} or w-px to set an element to a fixed width.
Percentage widths
Use w-{fraction} or w-full to set an element to a percentage based width.

Shadows: utilidades para box-shadow:
shadow-xs: box-shadow: 0 0 0 1px
shadow-sm
shadow
shadow-xl
shadow-2xl
shadow-inner
shadow-outline
shadow-none

NOTA: Tailwind trabaja por defecto con CssGrid,aunque también puede hacerlo con Flex,pero por defecto usa grid.


   						VIDEO 02 GRID CON TAILWIND
 
				GRID TEMPLATE COLUMNS

Si quiero establecer un sistema de columnas con tailwind puedo usar un grid layout con las clases grid-cols-{number}.Sintaxis:
 
grid-cols-1	grid-template-columns: repeat(1, minmax(0, 1fr));
grid-cols-2	grid-template-columns: repeat(2, minmax(0, 1fr));
grid-cols-3	grid-template-columns: repeat(3, minmax(0, 1fr));
grid-cols-4	grid-template-columns: repeat(4, minmax(0, 1fr));

Para poner un contenedor en grid primero tengo que usar la clase grid:
<div class="grid grid-cols-3 gap-4">
    <div class="bg-red-400">Col1</div>
    <div class="bg-red-400">Col2</div>
    <div class="bg-red-400">Col3</div>
  </div>
  
Gap:puedo espaciar con gap.Si uso gap espaciará tanto en el eje x como en el eje y.Si quiero puedo usar gap-x ó gap-y  para espaciar distinguiendo entre columnas y filas:
gap-4 <- es equivalente a gap-x-4 + gap-y-4

			GRID COLUMN START/END - COLUMN SPAN

Obviamente puedo dar más longitud a algunas columnas.Para ello tengo las clases auxiliares col-start,col-end y col-span:
<div class="grid grid-cols-6 gap-4">
  <div class="col-start-2 col-span-4">01</div>
  <div class="col-start-1 col-end-3>02 <- fijate que podria usar col-span-2
  <div class="col-start-7 col-span-2">03</div>
  <div class="col-start-1 col-end-7>04</div>
</div>

						GRID RESPONSIVE

Recuerda que en dispositivos móviles casi con toda probabilidad querré otro layout.Lo puedo realizar fácil con las clases para breakpoints:

<div class="grid grid-cols-1 sm:grid-cols-3"> <- empiezas en una columna y cuando llegues a 640px ya si pasas a 3.Desde luego este framework es perfecto.

Fijate que fácil creo un sistema de 3 columnas responsivo:
<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-4 gap-y-1 mb-4" >

						GRID TEMPLATE ROWS

IMPORTANTE: 12 es el máximo de columnas que trae por defecto el sistema de Grid de Tailwind(aunque puede ampliarse).
Bien,si quiero trabajar con filas puedo usar la clase grid-rows-{n},obviamente sobre un sistema grid:
 <div class="grid grid-rows-2 md:grid-rows-4 grid-flow-col gap-4">
   <div class="bg-orange-300">Row1</div>
   <div class="bg-orange-300">Row2</div>
   <div class="bg-orange-300">Row3</div>
   <div class="bg-orange-300">Row4</div>
 </div>

Esto va a crear 4 filas desde 768 y más abajo 2 filas, pues está en flow-col y se wrapearán.Puedo observar que me respeta las filas.

				GRID ROW-START ROW-END Y ROW-SPAN

De igual manera que con las col puedo especificar medidas para una row:
<div class="grid grid-rows-3 grid-flow-col gap-4">
  <div class="row-span-3 ...">01</div>
  <div class="col-span-2 ...">02</div>
  <div class="row-span-2 col-span-2 ...">03</div>
</div>

					GRID AUTO FLOW

Para controlar la direccion puedo usar la clase grid-flow-{direction}:

grid-flow-row	grid-auto-flow: row;
grid-flow-col	grid-auto-flow: column;
grid-flow-row-dense	grid-auto-flow: row dense;
grid-flow-col-dense	grid-auto-flow: column dense;

Obviamente hay mucho más que investigar,pero puedo crear un layout de 2x5 por ejemplo sin apenas esfuerzo(grid grid-rows-2 grid-cols-5):
  
<h1 class="mb-2 text-lg tracking-wider">Practica 01</h1>
  <div class="grid grid-rows-2 grid-cols-5 gap-4 ">
    <div class="col-start-1 col-span-1 bg-orange-300">Col 1</div>
    <div class="col-span-1 bg-orange-300">Col 2</div>
    <div class="flex items-center justify-center row-span-2 col-span-3 bg-orange-300">Col 3</div>
    <div class="col-start-1 col-span-1 bg-orange-300">Col 1</div>
    <div class="col-span-1 bg-orange-300">Col 2</div>
   </div>

				VIDEO 03 INSTALACION CON NPM

Realmente sólo es seguir su documentación.Aqui veremos la forma sin framework:

Instalo tailwind en modo dev y creo su config file:

>npm install -D tailwindcss
>npx tailwindcss init

Lo configuro segun environment:

module.exports = {
  content: ["./src/**/*.{html,js}"],
  theme: {
    extend: {},
  },
  plugins: [],
}

Añado las directivas tailwind en un archivo src/input.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

Por último dejo el compilador activado:
npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch

* Fijate que puede que no quiera que se llame input.css o que compile a /dist.Por lo demás desde luego es bastante sencillo.

					PARTE 4 FLEXBOX EN TAILWIND

Source: https://www.youtube.com/watch?v=sfTBUHR9pyA&list=PLPl81lqbj-4JdoHDiERR2ptkw9zRggXAL&index=5&ab_channel=Bluuweb

Para trabajar con flexbox lo primero será usar la clase 'flex' en el contenedor padre.Por defecto está en la posición flex-direction:row,pero puede cambiarse a column | row-reverse | column-reverse.

En Tailwind se usarán estas clases para manejar la direccion de los hijos en el contenedor:
flex-row	flex-direction: row;
flex-row-reverse	flex-direction: row-reverse;
flex-col	flex-direction: column;
flex-col-reverse	flex-direction: column-reverse;

Para manejar como intentarán encajar los items se usa la propiedad flex-wrap:

flex-nowrap  	flex-wrap: nowrap; <- por defecto.Intentarán caber todos en una linea,encogiendose si es necesario y no respetando las medidas de los hijos
flex-wrap	    flex-wrap: wrap; <- no intentarán caber en una fila,saltando a otra si es necesario 
flex-wrap-reverse	flex-wrap: wrap-reverse; saltarán en orden reverso además

Para controlar como los items hijos serán posicionados en el eje principal del contenedor tanto en una disposición flex como grid se usar justify-content:

justify-start	justify-content: flex-start;
justify-end	justify-content: flex-end;
justify-center	justify-content: center;
justify-between	justify-content: space-between;
justify-around	justify-content: space-around;
justify-evenly	justify-content: space-evenly;

Para manejar como los items hijos serán alineados en base a su contenedor hijo se usa justify-items:

justify-items-start	justify-items: start;
justify-items-end	justify-items: end;
justify-items-center	justify-items: center;
justify-items-stretch	justify-items: stretch;

Y para manejar individualmente a un hijo en concreto se usa justify-self:

justify-self-auto	justify-self: auto;
justify-self-start	justify-self: start;
justify-self-end	justify-self: end;
justify-self-center	justify-self: center;
justify-self-stretch	justify-self: stretch;

Lo mismo para align(content-items-self) y para place(content-items-self).
NOTA:align-items tiene efecto siempre que el contenedor tenga un alto establecido

Align-content alinea el contenido de un contenedor multi-row tanto flex como grid siempre que tenga espacio sobrante en el eje Y,similar a lo que hace justify-content.Esta propiedad no tiene efecto cuando hay solo una fila de items hijos en el contenedor (minimo dos para cualquiera de las dos distribuciones).
NOTA:siempre que quiera trabajar con align-content tengo que usar flex-wrap

Align se usará para ubicarlos en base a su eje secundario(siempre que tenga un alto establecido el contenedor)
Con Place-content  se justifica y alinea el contenido a la vez
Con place-items se justifica y alinean los items 
Con place-self alineo y justifico un elemento hijo concreto.
Place-content center es muy útil

Por último tengo flex-basis que controla el size inicial de los hijos

basis-0	flex-basis: 0px;
basis-1	flex-basis: 0.25rem;
basis-2	flex-basis: 0.5rem;
basis-3	flex-basis: 0.75rem;
basis-4	flex-basis: 1rem;
basis-5	flex-basis: 1.25rem;
basis-6	flex-basis: 1.5rem;

Flex-grow que controlarán como creceránlos hijos:

grow	flex-grow: 1;
grow-0	flex-grow: 0;

Y lo mismo para como encogerán con flex-shrink:

shrink	flex-shrink: 1;
shrink-0	flex-shrink: 0;

Y con flex puedo controlar ambas:

flex-1	flex: 1 1 0%;
flex-auto	flex: 1 1 auto;
flex-initial	flex: 0 1 auto;
flex-none	flex: none;

							VIDEO 05 NAVBAR RESPONSIVE 

Fijate como ocultaré los enlaces en lg(1024px):
  <div class="block lg:hidden">
   ...todo oculto en 1024+
  </div>
Por lo demas nada importante pero recuerda que {breakpoint}:hidden es muy poderoso.

					VIDEO 06 USAR TAILWIND CON REACT

Realmente es seguir la guia,creo un proyecto,me cambio a él:

PASO UNO: crear proyecto React
npx create-react-app my-project
cd my-project

PASO DOS: instalo Tailwind y sus dependencias(autoprefixer depende de postcss):
npm install -D tailwindcss postcss autoprefixer <- fijate que son en -D
npx tailwindcss init <- esto crea el archivo para configurar tailwind

PASO TRES: configurar el archivo tailwind.config.js con lo necesario:
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}", <- agregar esto
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

IMPORTANTE: fijate que tanto tailwind como postcss como autoprefixer incluso van en modo dev,luego no ocuparán nada en el bundle.Genial.

PASO CUATRO: agregar las directivas tailwind e importar ese archivo al proyecto:
@tailwind base;
@tailwind components;
@tailwind utilities;

						CORE CONCEPTS OF TAILWIND

HOVER,FOCUS AND OTHER PSEUDOCLASSES FOR STATES:
Para los states engo las clases hover | focus| o active.Por ejemplo:
<button class="bg-violet-500 hover:bg-violet-600 active:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-300 ...">

También tengo first | last | odd | even para apuntar al primer hijo,al último,a los impares o a los pares:
 <li class="flex py-4 first:pt-0 last:pb-0">
  <tr class="odd:bg-white even:bg-slate-100">
* TAmbién tiene only-child,empty o first-of-type

Form states: tiene pseudoclases para formularios como required,invalid o disabled
 <input type="text" value="tbone" disabled class="mt-1    focus:outline-none  invalid:border-pink-500 invalid:text-pink-600 ...

Tiene otras para agrupar como group-focus, group-active, or even group-odd.
También tiene before o after(tailwind automáticamente añade content:"" asi que no tengo que hacerlo,pero si quiero otro puedo usarlo):
before:content-[''] before:block ...

Puedo apuntar a la propiedad placeholder:
placeholder:italic placeholder:text-slate-40
Puedo apuntar a un input type file con file:
  file:mr-4 file:py-2 file:px-4
Puedo apuntar al marker o bullet de una lista con marker:
marker:text-sky-400

Puedo apuntar a texto seleccionado por el usuario con selection:
<div class="selection:bg-fuchsia-300 selection:text-fuchsia-900"> <- muy bonito,pone el fondo en rosita claro y la letra en rosa fuerte.
NOTA:el modifier 'selection' es heredado automáticamente,asi que puedo ponerlo en el body para que toda la app lo herede
<body class="selection:bg-pink-300">

También hay modificadores para la orientación del dispositivo:
<div class="portrait:hidden">
    <!-- ... -->
  </div>
  <div class="landscape:hidden">
Para un documento al ser imprimido:
<article class="print:hidden">
Orientación del texto(rtl o ltr):
div class="ltr:ml-3 rtl:mr-3">

RESPONSIVE DESIGNS: tiene los siguientes breakpoints.Fijate que tiene 2xl para mas de 1535px

Breakpoint prefix	Minimum width	CSS
sm	640px	@media (min-width: 640px) { ... }
md	768px	@media (min-width: 768px) { ... }
lg	1024px	@media (min-width: 1024px) { ... }
xl	1280px	@media (min-width: 1280px) { ... }
2xl	1536px	@media (min-width: 1536px) { ... }

DARK MODE: ahora mismo al diseñar una web es imprescindible el dark mode.Tailwind permite apuntar a este modo simplemente usando el prefijo dark:clases.Ejemplo:
 <div class="bg-white dark:bg-black">
NOTA:para que lo controle el sistem darkMode irá en 'media',si quiero el control yo irá en 'class'(ver documentación):

module.exports = {
  darkMode: 'media' | 'class', (sistema o modo manual
}

Puedo customizar lo que quiera,como mis propios breakpoints,mis propios colores(esto si parece superútil),imágenes,fuentes,...
module.exports = {
  theme: {
    screens: {
      sm: '480px',
      md: '768px',
      lg: '976px',
      xl: '1440px',
    },
    colors: {
      'blue': '#1fb6ff',
      'pink': '#ff49db',
      'orange': '#ff7849',
      'green': '#13ce66',
      'gray-dark': '#273444',
      'gray': '#8492a6',
      'gray-light': '#d3dce6',
    },
    fontFamily: {
      sans: ['Graphik', 'sans-serif'],
      serif: ['Merriweather', 'serif'],

También puedo agregarle plugins,para agregarle plugins parece que tengo que usar esta sintaxis:
const plugin = require('tailwindcss/plugin')

module.exports = {
  // ...
  plugins: [
    require('@tailwindcss/typography'),
    require('@tailwindcss/forms'),
    require('@tailwindcss/line-clamp'),
    require('@tailwindcss/aspect-ratio'),
  ]
}
Por ejemplo,usar el de forms extenderá la funcionalidad de Tailwind a selects o checkboxes:
<!-- You can actually customize padding on a select element: -->
<select class="px-4 py-3 rounded-full">
  <!-- ... -->
</select>

<!-- Or change a checkbox color using text color utilities: -->
<input type="checkbox" class="rounded text-pink-500" />

O por ejemplo otro para el aspect-ratio:
The @tailwindcss/aspect-ratio plugin adds aspect-w-{n} and aspect-h-{n} classes that can be combined to give an element a fixed aspect ratio.

<div class="aspect-w-16 aspect-h-9">
  <iframe src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

También tiene otras opciones como preset,que parece que mezcla incluso otros plugins con la configuracion por defecto.

						VIDEO 07 ANIMACIONES

Para transiciones Tailwind tiene la clase transition,aparte puede ir acompañada d e un tipo y una duración:
button class="transition ease-in duration-700"
buttn class="transition ease-out duration-500
a class="transition ease-in-out duration-300
button transition ease-linear duration-400

Bien,fijate que tuvo que agregar variants(diria que ya no hace falta):
Y ahora puedo incluso animar el border width de un enlace:
<a class=" hover:border-b-2 hover:border-b-slate-600 border-b-2 border-b-teal-500 transition ease-in-out duration-700">

IMPORTANTE: tailwindcss me da animaciones ya echas,muy útiles:

Add the animate-spin utility to add a linear spin animation to elements like loading indicators.
<svg class="animate-spin 
Ping
Add the animate-ping utility to make an element scale and fade like a radar ping or ripple of water — useful for things like notification badges.
Add the animate-bounce utility to make an element bounce up and down — useful for things like “scroll down” indicators.

Obviamente también puedo customizar mis propias animaciones.Recuerda animate-spin para un loader,animate-ping para una notification badge,animate-bounce para un pequeño rebote y animate-pulse para un fade-in fade-out.
Seguir investigando sobre este prometedor framework.
