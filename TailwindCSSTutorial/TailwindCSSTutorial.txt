						TUTORIAL DE TAILWINDCSS POR BLUUWEB

Fuente: https://www.youtube.com/watch?v=3xlUAMXui2c&list=PLPl81lqbj-4JdoHDiERR2ptkw9zRggXAL

TailwindCSS es mucho más poderoso,ya que Bootstrap ofrece clases que ofrecen componentes ya personalizados,mientras que con Tailwind puedo personalizar todo,ya que no ofrece componentes,sino clases de utilidad.

NOTA: si bien puedo usar su CDN para empezar rapidamente a estilizar no se recomienda para producción,ya que no podré usar directivas como @apply,@variants,... no podré customizar el default theme, no puedo instalar plugins o activar features como group-hover.
Es obvio pues que debo usar npm siempre que haga algo minímamente serio.

						PRINCIPIOS DE TAILWINDCSS

Tailwind por defecto usa normalize.Reseteará varios elementos como los headings,quitandoles margen,tamaño y peso de la fuente, las listas,quitandolas margenes y viñetas o poniendo en display:block a <img>.<svg> <video>,...

Esto es asi porque quieren que yo personalize los headings.Veamos un ejemplo con un botón:
  <button class="bg-blue-500 px-2 py-1 rounded text-white hover:bg-blue-700 mt-4 font-bold">Boton Tailwind</button>

IMPORTANTE: Tailwind está diseñado Mobile First,cualquier breakpoint que se le aplique lo heredarán los breakpoints superiores(debido a que usa min-width):

sm: @media(min-width:640) <- fijate que en cuanto aplique sm dejo las clases normales para un tamaño menor a 640 y lo que ponga en esas clases desde 640 en adelante
<button class"px-2 sm:px4" <- puedo ver que es Mobile First,pues será un padding de 2 rem para tamaño menor a 640 y desde 640 un padding de 4 rem.

md: @media(min-width:768px) <- y lo mismo para los demas breakpoints.Si ahora aplico este,cualquier tamaño superior a 768 tomará estas clases para estilizarse,confirmando que vamos de menor tamaño a mayor tamaño.
<button class="px-2 sm:px-4 md-px-3"> <- fijate como cubre todas las posibilidades

lg:@media(min-width:1024px) <- lg para portatiles
xl:@media(min-width:1280px) <- para screens grandes como ordenadores de sobremesa,tvs,etc.Fijate que por esto no encontraba xs,porque es el breakpoint que quedará.

NOTA: en Tailwind los modificadores se pueden stackear para hacer target a situaciones más especificas:
<button class="dark:md:hover:bg-fuchsia-600"> <- solo desde 768px,en el hover y en el tema oscuro

						PREFLIGTH

NOTA:Prefligth está construido sobre normalize.css
Prefligth es un conjunto de estilos base para Tailwind que están diseñados para suavizar las inconsistencias entre navegadores.SI bien ya lo he mencionado antes:
Prefligth elimina todos los márgenes predeterminados de encabezados,párrafos,...
Todos los headings tendrán el mismo tamaño y peso de fuente
Las listas(ordenadas y no ordenadas) están sin estilo,márgenes y viñetas
Imágenes y otros elementos multimedia están en disposición block y no inline-block

							CLASES

Clase Container: crea un contenedor(pero no centra nada,ojo,lo tengo que hacer yo)
Según el breakpoint va a ser de un tamaño máximo concreto
breakpoint(none): width:100%
breakpoint(sm): el container será de max-width:640px
breakpoint(md): max-width:768px
breakpoint(lg): max-width:1024px
breakpoint(xl): max-width:1280px

Obviamente tengo que usar mx-auto para centrarlo.
Fijate que puedo usar xl:container para que solo se aplique la clase desde min-width:1280px por ejemplo.

Paddings & Margenes:Exactamente igual que en Bootstrap,usaré p,px,py,pl,pr,pb,pt + el padding que quiera como un numero.
NOTA: cada numero incrementa en 0.25rem,asi p-1 es un padding de 0.25 rem mientras que p-2 es un padding de o.5rem.

IMPORTANTE: Tailwind es mucho mejor que Bootstrap,puedo usar decimales(p-1.5,es decir padding de 0.375rem),y puedo llegar hasta 100.La escala que usa Tailwind es(desde 1 al 16 de 1 en 1 y despues de 4 en 4,luego puedo usar p-16,p-20,p24,p-28,... hasta p-96)

IMPORTANTE: otra cosa que no tiene Bootstrap es poder usar márgenes o paddings negativos.En Tailwind puedo usar un (-)delante para que sea negativo:
<div class="-mt-3.5" <- margin-top de -0.875rem.
Lo mismo para márgenes

Space-between: clase especial que es como gap.Dará un espaciado entre los elementos,sin afectar al primero y ultimo.Por ejemplo, space-x-1 dara un espaciado entre los elementos en el eje x.Lo mismo para la y:

space-x-0 > * + *	margin-left: 0px;
space-y-0 > * + *	margin-top: 0px;
space-x-0.5 > * + *	margin-left: 0.125rem;
space-y-0.5 > * + *	margin-top: 0.125rem;
space-x-1 > * + *	margin-left: 0.25rem;
space-y-1 > * + *	margin-top: 0.25rem;

Font-Size: controla el font size de un elemento usando la clase 'text-{size}'.Empieza en xs y llega hasta xl,aunque está ultima puede llevar un numero delante hasta9(text-xs,text-lg,text-xl,text-3xl,text-7xl,...)

text-xs	font-size: 0.75rem; line-height: 1rem;
text-sm	font-size: 0.875rem; line-height: 1.25rem;
text-base	font-size: 1rem; line-height: 1.5rem;
text-lg	font-size: 1.125rem; line-height: 1.75rem;
text-xl	font-size: 1.25rem; line-height: 1.75rem;
text-2xl	font-size: 1.5rem; line-height: 2rem;
text-3xl	font-size: 1.875rem; line-height: 2.25rem;
text-4xl	font-size: 2.25rem; line-height: 2.5rem;
text-5xl	font-size: 3rem; line-height: 1;
text-6xl	font-size: 3.75rem; line-height: 1;
text-7xl	font-size: 4.5rem; line-height: 1;
text-8xl	font-size: 6rem; line-height: 1;
text-9xl	font-size: 8rem; line-height: 1;

Muchas veces necesitamos otra fuente en dispositivos más pequeños:
<p class="text-base md:text-lg xl:text-2xl"> 
Una regla que tiene Tailwind es crear los estilos empezando desde dispositivos más pequeños.

Colores para texto y fondo: para el fondo usaré .bg-{color} mientras que para el color de texto usaré .text-{color}.Recuerda que además puedo inferir un hexadecimalHay desde el 100 hasta el 900 para la tonalidad:
<h1 class="text-red-900 text-3xl">Esto es un header h1 de color text-red-900</h1>
<h2 class="-mt-1.5 text-blue-700 text-2xl">h2 con margin top negativo</h2>
<h3 class="text-orange-600 -ml-1.5 text-lg">h3 con margen left negativo</h3>

Alineacion: para alinear se usa text-center,text-right,text-left y text-justify:

text-left	text-align: left;
text-center	text-align: center;
text-right	text-align: right;
text-justify	text-align: justify;

Text-transform: para transformar textos Tailwind es un poco menos verboso que Bootstrap y cambia text-uppercase por sólo uppercase,lo mismo con todas:

uppercase: text-transform:uppercase;
lowercas: text-transform: lowercas;
capitalize: text-transform: capitalize;
normal-case: text-transform:none

Border-radius: utilities para controlar el border radius:
rounded-none: border-radius:0
rounded-sm: border-radius:0.125rem;
rounded: border-radius:0.25rem;
rounded-md: 0.375
rounded-full: border-radius:9999px <- para circulos

rounded-t-none: border-top-left y border top right a none
rounded-t-md: border tops a 0.375
rounded-r-sm: border top right y border bottom right a 0.125
rounded-l-{size} borders por la izquierda a ese tamaño
rounded -b-{size}

Recuerda que puedo redondear todo,o solo un lado o hacer un circulo

Anchos y Altos(width y height)
w-0: width de 0
w-1: width de 0.25rem;
w-2: width de 0.5rem;
w-1/2 <- width del 50%
w-1/3 width del 33.3333%
w-1/4 width del 25%
w-3/4 width del 75%
w-full: width del 100%
w-screen : width del 100vw
w-min: width de min-content
w-max: width de max-content

Resumen:
Fixed widths:
Use w-{number} or w-px to set an element to a fixed width.
Percentage widths
Use w-{fraction} or w-full to set an element to a percentage based width.

Shadows: utilidades para box-shadow:
shadow-xs: box-shadow: 0 0 0 1px
shadow-sm
shadow
shadow-xl
shadow-2xl
shadow-inner
shadow-outline
shadow-none

NOTA: Tailwind trabaja por defecto con CssGrid,aunque también puede hacerlo con Flex,pero por defecto usa grid.
