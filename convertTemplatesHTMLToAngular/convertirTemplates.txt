			CONVERTIR CUALQUIER TEMPLATE EN COMPONENTES PARA ANGULAR

					SECCION 2

Vamos a usar GitHubPages para el deploy y Firebase como Db.En el siguiente video esta el comprimido con la template.Descargarlo.

Dejo la template en Descargas y en Templates.

					VIDEO 07 INICIO PROYECTO

Me copio el contenido de assets al proyecto.Abrimos la template y puedo ver que el header y el footer parecen el mismo,y el body va cambiando.
NOTA:esto no lo sabía hasta ahora,pero puedo copiar en el index.html que trae Angular(donde esta el <app-root>)  enlaces en el <head> hacia adentro del proyecto:

<head>
  <meta charset="utf-8">
  <title>Portafolio</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/svg+xml" href="assets/img/urku-ico.svg">
  <link rel="stylesheet" href="assets/css/aurora-pack.min.css">
  <link rel="stylesheet" href="assets/css/aurora-theme-base.min.css">
  <link rel="stylesheet" href="assets/css/urku.css">
</head>

<body>
  <app-root></app-root>
  <script src="assets/js/svg4everybody.min.js"></script>
  <script>svg4everybody();</script>
</body>

* Da igual que assets/css/... esté dentro de <app-root>.Tengo visión sobre ellos.Y lo mismo para scripts.En el index.html de la app de Angular puedo apuntar tanto hacia afuera como hacia adentro.Genial.Y muy importante.

			VIDEO 11 COMPONENTE DEL ENCABEZADO O HEADER

Creo el componente header y el footer en la carpeta shared.Copio del portfolio-masonry.html las mismas etiquetas.Le cambio el año al footer(fijate que esto es importante,nunca dejar fechas en duro).

			VIDEO 13 COMPONENTE BODY- PRIMERA PÁGINA

Fijate que necesito la primera página,la primera ruta.Voy a copiar toda la <section> en este componente(ng g c pages/portfolio --skip-tests -is).Le quito el div de las categorias.
NOTA:cada componente únicamente debería contener información única.Por ejemplo,la etiqueta <section> la voy a repetir en cada página si la dejo alli.Entonces lo que hay que hacer es sacarla de alli:
<app-header></app-header>
<section class="ae-container-fluid rk-main">
  <app-portafolio></app-portafolio>
</section>
<app-footer></app-footer>
De nuevo fijate que esto es importante.

				SECCION 03 PAGINAS,RUTAS Y CONSTANTES

Esta sección está enfocada a crear las diferentes páginas/rutas que tendrá la app,siguiendo los estandares de Angular.

				VIDEO 18 CREANDO LA PÁGINA DE PRODUCTO

Creo la pagina/componente para el producto y para el about:
ng g c pages/about ...
Traigo su html de la template proporcionada.

				VIDEO 20-21 CREANDO LAS RUTAS Y LA NAVEGACIÓN

Puedo crearme un archivo app.routing.ts, el cual siempre será una clase con el decorador @ngModule().
Alli creo las rutas pertinentes en el arreglo de tipo Routes:

const routes: Routes = [
  {path: 'home', component: PortafolioComponent},
  {path:'about', component: AboutComponent},
  {path: 'item', component: ItemComponent},
  {path: '**', pathMatch: 'full', redirectTo: 'home'}
]
Fijate que el path '**' es buena idea pasarle pathMatch a full en vez del que está por default.

NOTA: Faltará traerse el RouterModule y usarlo en los imports.Es el RouterModule y su método forRoot o forChildren el que especifica/declara si son rutas padres o hijas.
@NgModule({
  imports: [ 
    RouterModule.forRoot(routes)
  ],
})
export class AppRoutingModule { }

Angular siempre cargará los componentes de estas rutas desde el primer momento.Sin embargo estos componentes podrían cargar de forma perezosa otras rutas hijas.

IMPORTANTE:puedo ver que no ha sido suficiente con ese imports y traerlo en otro módulo,aún no reconoce la etiqueta <router-outlet> Esto tiene mucho sentido ya que no he exportado de mi app.routing el modulo RouterModule.

@NgModule({
  imports: [ 
    RouterModule.forRoot(routes)
  ],
  exports: [
    RouterModule
  ]
})
export class AppRoutingModule { }

Diría que sta haciendo,lo traigo, lo configuro y lo exporto,,con lo que no es lo mismo que importarlo desde el app module.En principio cada archivo .routing se trae el modulo,lo configura y lo exporta ya configurado(confirmar esto).

NOTA:tengo una app con esto bastante claro.En el RouterModule.forRoot(routes) tiene la carga perezosa de dos modulos(/login y /register por un lado y /dashboard por otro,el cual podria cargar mas hijos en lazy load):

const routes: Routes = [
  {
    path: 'auth',
    loadChildren: () => import("./auth/auth.module").then(m => m.AuthModule)
  },
  {
    path:"dashboard",
    loadChildren: () => import("./protected/protected.module").then(m => m.ProtectedModule),
    canActivate:[ ValidarTokenGuard ],
    canLoad:[ValidarTokenGuard]
  },
  {
    path:"**",
    redirectTo:"auth"
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes,{
    useHash:false
  })],

Dado que es el padre usará forRoot pero ya está cargando en lazy load los dos modulos.Los módulos de rutas hijos no los pongo porque son muy simples.Parece un gran approach.
Sea como sea todo modulo de rutas ha hecho lo mismo,importar RouterModule,configurarlo con forRoot o forChildren y EXPORTARLO
Sigamos con el curso.

NOTA:para que funcion bien la directiva routerLinkActive es mejor usar paths como home y no con un ''.

ASi que voy por el header y el footer cambiando los href y poniendo la clase active en el routerLinkActive.

En cuanto a los items los cargaremos dinámicamente.Esto es un item:
   <a routerLink="/item"
        class="rk-item ae-masonry__item">
        <img src="assets/img/project-1.jpg" alt="">
        <div class="item-meta">
          <h2>Essential Stationery</h2>
          <p>Branding</p>
        </div>
      </a>

NOTA:cuando e crea una ruta un servidor por defecto intenta entrar al index.html de esa ruta,asi pues, al crear la ruta /home el servidor apache o nginx va a intentar servir el index.html de /home.Fijate que esta carpeta no existe.

Usualmente si tenemos acceso al servidor podemos modificar la configuración del apache o del nginx,pero como la serviremos en gitHubPages tengo que usar el hash.

Al agregar el hash las rutas pasarán de:
dominio/item/1 
a esta otra 
dominio/#/item/1

Fijate que agregar el hash hace que los servidores no intenten buscar en un directorio,y siempre seguiremos en el mismo index.html.Nunca nos salimos del archivo,con lo que Angular nunca pierde el control

			SECCION 04 PETICIONES HTTP-SERVICIOS Y ANIMACIONES

Crearemos un archivo JSON interno al que haremos peticiones.Fijate que es una gran estrategia.Crearemos un servicio para las peticiones y retocaremos alguna animación por CSS(o directamente las crearemos).

					VIDEO 25 CREANDO UN ARCHIVO JSON

Vamos a crear un json que me permita parametrizar mi aplicación.Puedo comprobar si la sintaxis está correcta con cualquier parseador inline para JSON:
{
  "titulo": "Oscar's Portfolio",
  "email": "oscargm28@hotmail.com",
  "nombre_corto": "Oscar",
  "pagina_autor": "http://oscargm28.github.io/",
  "facebook": "https://www.facebook.com/oscargm28",
  "twitter": "https://twitter.com/oscargm28",
  "instagram": "https://www.instagram.com/oscargm28/",
  "equipo_trabajo": []
}
NOTA.En angular en la carpeta assets/data/data.json es el lugar ideal para dejarlo.
			VIDEO 26 SERVICIO PARA CONSULTAR ESTE JSON

Un servicio se puede utilizar para compartir información global a toda mi aplicación,o también para manejar cierta lógica y abstraerla de la clase de un componente.Normalmente son estas dos sus utilidades.
Como queremos compartir esta data hay que crear un servicio:
ng g service services/

NOTA:antes los services habia que especificarlos en los providers(igual que un interceptor),pero ya no es necesario desde @Injectable
NOTA: cualquier cosa con el decorador @Injectable puede inyectarse,es por ello que lo tiene el servicio.

Para poder hacer peticiones voy a necesitar el modulo HttpClientModule
Esperate al 10 al menos antes de empezar a buscar algo y habla con los de ViewNext

Puedo realizar peticiones a un servidor externo,esto es lo más común,pero también puedo realizar peticiones a mi misma aplicación,es decir a mi mismo servidor:
Dado que estoy dentro de app y quiero apuntar a app/assets/data/data.json tengo que hacer un get a assets/data/data.json:

  public getInfo() {
    return this.http.get('assets/data/data.json');
  }

			VIDEO 27 CREANDO INTERFAZ PARA LA RESPONSE

Realmente es muy sencillo crear la interfaz para el json anterior.Visito quicktype.io con el json y le doy un nombre.Alojo el archivo en interfaces/data.interface.ts:
export interface InfoPagina {
  titulo?: string;
  email?: string;
  nombre_corto?: string;
  pagina_autor?: string;
  facebook?: string;
  twitter?: string;
  instagram?: string;
  tumblr?: string;
  equipo_trabajo?: any[];
}
Fijate que tuve que ponerlos opcionales(memoriza este error y su solución).Sea como sea ya tengo el tipado.
  public getInfo() {
    return this.http.get('assets/data/data.json')
    .subscribe( (resp:InfoPagina) => {
      this.cargada = true;
      this.info = resp;
    });
  }

		VIDEO 28 USANDO EL SERVICIO PARA REEMPLAZAR INFORMACIÓN EN LA TEMPLATE

Dado que tengo un par de propiedades en el servicio y ya está haciendo él las peticiones puedo usarlas en las templates:

En el header.component.ts inyecto _infoPagina:InfoPaginaService
  <a routerLink="home">{{_infoPagina.info.titulo}}

   <span class="ae-u-bolder">{{ anio }} {{_infoPagina.info?.titulo}}</span>All Right Reserved.</p>
    </div>
    <div class="ae-grid__item item-lg-4 au-xs-ta-center">
      <a target="_blank" [href]="_infoPagina.info?.facebook" class="rk-social-btn ">
        <svg>
          <use xlink:href="assets/img/symbols.svg#icon-facebook"></use>
        </svg>
      </a>
      <a target="_blank" [href]="_infoPagina.info?.twitter" class="rk-social-btn ">
Y en el footer hago lo mismo

				VIDEO 29 AGREGANDO ANIMACIONES A NUESTRAS PAGINAS

La manera más fácil de agregar animaciones es usar animate.css.Asi pues uso su CDN y agrego un fadeIn a las cards del equipo y a cada item.

				SECCION 05 UTILIZANDO FIREBASE 

Vamos a crear un pequeño servicio REST en Firebase.Será una RealTime Database,la creo con todo en false pero despues le cambio read a true.Write se quedará en false,con lo que solo yo puedo escribir.

En esa RealTime Database creo una coleccion equipo y tres documentos.Para saber la URL loñ tengo arriba,pero hay que agregar .json(al estar en modo lectura open puedo verlo desde un navegador).La url que me quedó es:
https://angulartemplatesfh-default-rtdb.europe-west1.firebasedatabase.app/equipo.json

Para las imagénes necesitaré el Storage de ellos,asi que lo habilito y pongo solo lectura ese storage.Nadie podrá escribir en el.Perfecto.
A la izquierda de rules tengo archivos.Alli puedo subir archivos desde un botón.Puedo elegir otras o las mismas.

NOTA:Firebase creará una URL para cada imagen(con un token como queryParam).DEbo copiar ese vinculo https y agregarlo como campo(lo llamo url)
Puedo observar que fácil ha sido crear una REST incluso con imagenes.

Como siempre me creo el servicio y la interfaz:
  
  public getEquipo(){
      return this.http.get<Equipo[]>('https://angulartemplatesfh-default-rtdb.europe-west1.firebasedatabase.app/equipo.json')
      .subscribe( (resp) => {
      this.cargada = true;
      this.equipo = resp;
   });
  }
e itero sobre esa respuesta en la template:
<div *ngFor="let member of _infoPagina?.equipo"
  class="animate__animated animate__fadeIn ae-grid__item item-lg-4 ae-kappa au-mb-3">
  <img [src]="member?.url" alt="" class="au-mb-3">
    <h5 class="ae-u-bolder au-mt-2">{{member?.nombre}}</h5>
    <p class="ae-u-bolder au-mb-3">{{member?.subtitulo}}</p>
    <p class="au-lg-ta-left au-mb-3 au-pl-4 au-pr-4">{{member?.frase}}</p>
    <a target="_blank" href="https://twitter.com/{{member?.twitter}}" class="ae-u-bolder au-underline">{{member?.twitter}}</a>
  </div>

			SECCION 06  BACKUPS Y CARGAR INFORMACIÓN A FIREBASE

Esto es algo que tengo que acostumbrarme a hacer(los backups de las bases de datos).

			VIDEO 37 CARGANDO INFORMACIÓN A FIREBASE

Para hacer el backup voy a la RealTime DB y en el icono de los tres puntos verticales puedo exportar la db como JSON.
Fernando me proporciona dos JSON(productos.json y productos_idx.json).Éste último tiene menos información.Vamos a cargar ambos json.

Voy a la DB y creo un nodo 'productos'(fijate que parece que tengo que crearlo desde la URL).En esta nueva colección importo el productos.json(puedo comprimir y expander los datos con los iconos)
De igual manera creo otro nodo 'productos_idx' e importo el otro json

				VIDEO 38 CREANDO EL SERVICIO DE PRODUCTOS

Es momento de leer de la coleccion productos_idx para crear la template dinámicamente.Creo un nuevo servicio,con su petición y saco la data a una propiedad,etc:
ng g s services/productos --skip-tests

@Injectable({ providedIn: 'root' })
export class ProductosService {
    cargando:boolean = true;
    productos:Producto[] = [];

  constructor(private http: HttpClient) { 
    this.cargarProductos();
  }

  private cargarProductos() {
    return this.http.get<Producto[]>(`${base_url}/productos_idx.json`)
    .subscribe( (resp) => {
      this.cargando = false;
      this.productos = resp;
    });
  }
Fijate que ahora para iterar tengo un pequeño problema,ya que durante unos instantes será undefined.Esto se arregla con el operador ?:

      <a *ngFor="let producto of productosService?.productos" 
      routerLink="/item/{{producto.cod}}"
        class="rk-item ae-masonry__item animate__animated animate__fadeIn">
        <img src="assets/productos/{{producto.url}}.jpg" alt="">
        <div class="item-meta">
          <h2>{{producto?.titulo}}</h2>
          <p>{{producto?.categoria}}</p>
        </div>
      </a>

Perfecto.Vamos a crear un loading para esos instantes:

					VIDEO 41 AÑADIENDO UN LOADING 

Fernando proporciona un enlace a CodePen con un Loading,con su html y su css..Habrá que crear un componente para ese loading pues.@s,con su html y su css.
Lo retoco al gusto y lo muestro condicionalmente.Perfecto:
  <app-loading *ngIf="productosService?.cargando"></app-loading>

			SECCION 07 PANTALLA DE PRODUCTO Y BUSQUEDA

En esta seccion vamos a crear una busqueda de productos y la pantalla de un producto.Sección interesante según el Dios Fernando Herrera.

				VIDEO 44 ENVIAR PARÁMETROS POR LA URL

Hay varias formas de crear enlaces a urls dinámicas.Una sería simplemente 

 <a *ngFor="let producto of productosService?.productos" 
      routerLink="/item/{{producto.cod}}"

Otra forma es montando toda la ruta con un arreglo.Al ser un arreglo  la propiedad necesita las llaves cuadradas:
[routerLink]="['/item',producto?.cod]"

Obviamente hay que definir la ruta para que recoja este param dinámico con un nombre:
{path: 'item/:cod', component: ItemComponent},

Y para leer el param nos suscribimos al activatedRoute:
constructor(private activatedRoute: ActivatedRoute) {
    this.activatedRoute.params.subscribe(params => this.cod = params['cod']);
  }
Lo meto en la propiedad cod,por ejemplo.Ya sólo quedaría llamar al servicio y traer un sólo producto en base a ese id.

				VIDEO 45 SERVICIO PARA OBTENER UN PRODUCTO

Habrá que crear un servicio que apunte a la colección 'productos' que tiene más datos referentes a un producto que la 'productos_idx'.
Esta colección necesitara otra interfaz.

NOTA: se dice backtick y no backtips.Al usar backticks puedo usar template literals,pudiendo inferir código en ese string

IMPORTANTE: fijate que es muy repetitivo ir poniendo todo con optional chain operators:
   <h1 class="ae-u-bolder rk-portfolio-title ">{{productoService?.producto?.producto}}</h1>
      <p class="ae-theta rk-portfolio-category ">{{productoService?.producto?.categoria}}</p>
    </div>
Una solución a esto es coger todo el bloque de HTML y pintarlo condicionalmente a cuando exista esa propiedad:
<section *ngIf="productoService.producto">
   <h1 >{{productoService.producto.producto}}</h1>
   <p >{{productoService.producto.categoria}}</p>
</section>
De esta forma siempre va a existir el producto,asi que no necesito el optional chain operator.
Yo lo dejaré asi:
<section class="ae-container-fluid ae-container-fluid--full"
 *ngIf="productoService?.producto"> <- Genial
Itero sobre el html y sustituyo las imagenes,etc.Sin embargo la imagen main necesita algo más de trabajo

			VIDEO 46-47 ACTUALIZANDO PAGINA PRODUCTO

Realmente es sencillo,apunto a la otra base de datos con el id como argumento(el cod):
  public cargarProducto(cod: string) {
    return this.http.get<ProductoItem>(`${base_url}/productos/${cod}.json`).pipe(
      delay(50)
    )
      .subscribe((resp) => {
        this.cargando = false;
        this.producto = resp;
      });
  }
}

Y en la ruta dinámica llamo al servicio en cada cambio de ruta:
  constructor(private activatedRoute: ActivatedRoute,
    public productoService: ProductoService) {
    this.activatedRoute.params.subscribe(params => this.cod = params['cod']);
    this.productoService.cargarProducto(this.cod);
  }

Cada producto tiene tres imagenes,pero la más grande está puesta como una clase.No queremos esto.
IMPORTANTE: para usar un estilo inline en Angular al que inferirle una variable hay que usar la directiva [ngStyle].Ejemplo:
<header class="..." [ngStyle]="{'background-image':'url(assets/productos/'+cod+'/main.jpg)'}"
Truco: para inferir algo cortar con '++' y dentro de los ++ meto la variable('+cod+'

			VIDEO 48 CREANDO LA PÁGINA DE BÚSQUEDA

Al presionar la lupa queremos que busque(en productos??).De momento capturemos el texto de ese input(que está en el header).
IMPORTANTE: fijate que está en un <form> el input y va a hacer refresh por naturaleza.habría que importar un módulo de formularios para inferir el preventDefault a los forms,pero para algo tan sencillo mejor quitamos el form y usamos una referencia local:

  <form class="rk-search">
        <input
          type="text"
          placeholder="Buscar..."
          id="urku-search"
          class="rk-search-field"
          >
        <label for="urku-search">
          <svg>
            <use xlink:href="assets/img/symbols.svg#icon-search"></use>
          </svg>
        </label>
  </form>
NOTA: CAmbio <form> por un <div> (la etiqueta <form> es tanto semántica,pues indica un formulario, como presentacional,pues es de tipo bloque para que pueda albergar controles de bloque también(un elemento inline no puede tener uno de bloque)
Asi que un form es un div semántico,una caja.Importante esto,asinto.

Como siempre creo una ref y en el keyup.enter me traigo su valor:
  <input
          type="text"
          placeholder="Buscar..."
          id="urku-search"
          #txtSearch
          (keyup.enter)="search(txtSearch.value)"
          class="rk-search-field"
          >
Al introducir un termino válido el usuario redireccionaré al usuario a esa ruta(fijate que puedo hacer lo mismo en mi app cuando busquen me da igual donde estén,idiota):
 search(termino:string){
    if(termino.length < 1){
      return;
    }
    this.router.navigate(['/search',termino]);
  }

Creo un componente nuevo,que va a ser una ruta dinámica,luego hay que crear esa nueva ruta:
  {path: 'search/:termino', component: SearchComponent},
De nuevo me suscribo en el cambio de parámetro para realizar la petición.
IMPORTANTE:fijate que ya tengo un arreglo con todos los productos,podría filtrar sobre ese arreglo

		VIDEO 50 LÓGICA DEL PROCESO DE CARGA DE TODOS LOS PRODUCTOS Y POSTERIOR FILTRADO DE LOS MISMOS- CREAR UNA PROMESA DE CUALQUIER COSA 

Este video probablemente sea el más importante.Fijate que yo no puedo filtrar sobre un arreglo de productos si ese arreglo aún se está pidiendo.Esto es un error que puede ser complicado de ver,pero es sencillo de arreglar.

La solución es crear una Promesa con el getProductos,de forma que pueda esperar a que los productos se carguen todos,ante de filtrar.Fijate que fue mucho más importante de lo que yo pensaba la ubicación del resolve:

  private cargarProductos() {
    return new Promise<void>((resolve, reject) => {
      this.http.get<Producto[]>(`${base_url}/productos_idx.json`)
        .subscribe((resp) => {
          this.cargando = false;
          this.productos = resp;
          resolve();
        });
    });
  }

Y esta promesa se ha creado para esto,para que si no existe el arreglo se espere(fijate que reornar una new Promise hace que tenga que suscribirme a esa promesa,resolverla con .then.Es como un Observable,tengo que dispararla.Genial

  public filtrarProductosAsync(termino: string) {
    termino = termino.toLocaleLowerCase();
    if(this.productos.length === 0) {
      this.cargarProductos().then( () => {
        this.filtrarProductos(termino);
      });
    }else{
      this.filtrarProductos(termino);
    }
  }
  
Filtrar productos simplemente barre con un filter + includes:
  private filtrarProductos(termino: string) {
    this.productosFiltrados = [];
    this.productosFiltrados = this.productos.filter(producto => producto.titulo.toLocaleLowerCase().includes(termino) || producto.categoria.toLocaleLowerCase().includes(termino));
  }

			SECCION 08 SUBIR APLICACIÓN A GITHUBPAGES

Puedo usar el paquete http-server para probar una aplicación en pre-producción(tras hacer el build).También podría usar live-server,por ejemplo.

NOTA: no confundir el paquete serve(que sirve para levantar un json como un backend REST,y necesita apuntar a un json(sintaxis serve file.json) con el paquete http-server que levanta un index.html en un navegador web(y no necesita apuntar a un .html,solo hay que ir hasta la carpeta y ejecutar 'http-server -o'

NOTA: Selectores útiles
:first-child: primer hijo del elemento sobre el que apunto
:last-child: último hijo 
:nth-child(n): hijo numero n del elemento sobre el que apunto
:nth-last-child(n): último hijo numero n(empieza desde atras)
:first-of-type : primer hijo del mismo tipo(<div> <div /> </div)
:last-of-type: último hijo del mismo tipo sobre el que apunto
:nth-of-type(n): hijo enésimo de cualquier tipo 
:nth-last-of-type(n)
:empty: elementos sin contenido
:not(x): not match by x selector,que no sea del tipo...
:target para las <a>
::first-line <- primera linea del contenido
::first-letter <- primera letra del contenido

